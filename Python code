!pip install biopython pandas matplotlib 

from Bio import Entrez, SeqIO  # Import Entrez for NCBI API access, SeqIO for parsing sequence files
import pandas as pd
import matplotlib.pyplot as plt
import numpy as np

# Function to fetch sequences from NCBI nucleotide database using accession numbers
def fetch_sequences(accessionNumbers):
    fetchedSequences = []  
    for acc in accessionNumbers: 
        handle = Entrez.efetch(db="nucleotide", id=acc, rettype="fasta", retmode="text")  
        # efetch: fetches sequence by ID from the nucleotide database in FASTA format (text mode)

        record = SeqIO.read(handle, "fasta")  # Parse the fetched FASTA data into a SeqRecord object
        fetchedSequences.append(record)  
        handle.close()  # Close the network handle
    return fetchedSequences  

# Example accession numbers (human and chimpanzee mitochondrial genomes)
accession_numbers = [
    "NC_012920.1",  # Homo sapiens mitochondrion, complete genome
    "NC_001807.4",  # Homo sapiens mitochondrion, revised Cambridge Reference Sequence
    "NC_011137.1"   # Pan troglodytes mitochondrion, complete genome
]

# Fetch sequences from NCBI based on the above accession list
seq_records = fetch_sequences(accession_numbers)

# Function to calculate nucleotide composition in percentages
def nucleotide_composition(seq_record):
    seq = str(seq_record.seq).upper()  # Get sequence as a string and convert to uppercase
    comp = {  # Count each type of nucleotide
        'A': seq.count('A'),  # Adenine
        'T': seq.count('T'),  # Thymine
        'G': seq.count('G'),  # Guanine
        'C': seq.count('C'),  # Cytosine
        'N': seq.count('N')   # Ambiguous/unknown nucleotides
    }
    total = len(seq)  
    for base in comp:  # Convert counts to percentages
        comp[base] = comp[base] / total * 100
    return comp  # Return dictionary of nucleotide percentages

# List to hold composition data for all sequences
comp_data = []
for record in seq_records:  
    comp = nucleotide_composition(record)  # Calculate composition
    comp['Sequence'] = record.id  # Add sequence identifier
    comp_data.append(comp)  

df_comp = pd.DataFrame(comp_data)

# Plot nucleotide composition as a bar chart
df_comp.set_index('Sequence', inplace=True)  # Use sequence IDs as DataFrame index
df_comp.plot(kind='bar', figsize=(10, 6))    
plt.title('Nucleotide Composition (%) for Selected Sequences')  
plt.ylabel('Percentage (%)')     
plt.xlabel('Sequence Accession') 
plt.xticks(rotation=45)          # Rotate x-axis labels for readability
plt.legend(title='Nucleotide')   
plt.tight_layout()               # Adjust layout to prevent label overlap
plt.show()
